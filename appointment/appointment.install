<?php

/**
 * @file
 * Install, update and uninstall functions for the appointment module.
 */
use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Entity\EntityManagerInterface;
/**
 * Implements hook_install().
 */
function appointment_install() {
  // Create the appointments view programmatically.
  $view = \Drupal::entityTypeManager()->getStorage('view')->create([
    'id' => 'appointments',
    'label' => 'Appointments',
    'base_table' => 'appointment_field_data',
    'display' => [
      'default' => [
        'display_plugin' => 'default',
        'id' => 'default',
        'display_title' => 'Master',
        'position' => 0,
        'display_options' => [
          'fields' => [
            'id' => [
              'id' => 'id',
              'table' => 'appointment_field_data',
              'field' => 'id',
              'label' => 'ID',
              'entity_type' => 'appointment',
              'entity_field' => 'id',
            ],
            'title' => [
              'id' => 'title',
              'table' => 'appointment_field_data',
              'field' => 'title',
              'label' => 'Title',
              'entity_type' => 'appointment',
              'entity_field' => 'title',
            ],
            'customer_name' => [
              'id' => 'customer_name',
              'table' => 'appointment_field_data',
              'field' => 'customer_name',
              'label' => 'Customer Name',
              'entity_type' => 'appointment',
              'entity_field' => 'customer_name',
            ],
            'appointment_date' => [
              'id' => 'appointment_date',
              'table' => 'appointment_field_data',
              'field' => 'appointment_date',
              'label' => 'Date',
              'entity_type' => 'appointment',
              'entity_field' => 'appointment_date',
            ],
            'status' => [
              'id' => 'status',
              'table' => 'appointment_field_data',
              'field' => 'status',
              'label' => 'Status',
              'entity_type' => 'appointment',
              'entity_field' => 'status',
            ],
          ],
          'pager' => [
            'type' => 'full',
            'options' => [
              'items_per_page' => 10,
            ],
          ],
          'style' => [
            'type' => 'table',
          ],
          'row' => [
            'type' => 'fields',
          ],
        ],
      ],
      'page_1' => [
        'display_plugin' => 'page',
        'id' => 'page_1',
        'display_title' => 'Page',
        'position' => 1,
        'display_options' => [
          'path' => 'appointments',
          'menu' => [
            'type' => 'normal',
            'title' => 'Appointments',
            'description' => '',
            'expanded' => FALSE,
            'parent' => '',
            'weight' => 0,
            'context' => '0',
            'menu_name' => 'main',
          ],
        ],
      ],
    ],
  ]);
  $view->save();
  // // Create the specializations vocabulary.
  // $vocabulary = \Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')->create([
  //   'vid' => 'specializations',
  //   'name' => 'Specializations',
  //   'description' => 'Adviser specializations',
  // ]);
  // $vocabulary->save();

  // // Add some default specializations.
  // $terms = [
  //   'Financial Advice',
  //   'Career Counseling',
  //   'Legal Consultation',
  //   'Health Services',
  //   'Education Guidance',
  // ];

  // foreach ($terms as $term_name) {
  //   $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->create([
  //     'vid' => 'specializations',
  //     'name' => $term_name,
  //   ]);
  //   $term->save();
  // }
  
}

/**
 * Implements hook_uninstall().
 */
function appointment_uninstall() {
  $entity_manager = \Drupal::entityTypeManager();

  // 1. Delete the appointments view.
  if ($view = $entity_manager->getStorage('view')->load('appointments')) {
    $view->delete();
  }

  try {
    // Load the entity type manager.
    $entity_type_manager = \Drupal::service('entity_type.manager');

    // Load the storage for the appointment entity.
    $appointment_storage = $entity_type_manager->getStorage('appointment');

    // Delete all appointment entities.
    $appointments = $appointment_storage->loadMultiple();
    foreach ($appointments as $appointment) {
        $appointment->delete();
    }

    // Load the storage for the agency entity.
    $agency_storage = $entity_type_manager->getStorage('agency');

    // Delete all agency entities.
    $agencies = $agency_storage->loadMultiple();
    foreach ($agencies as $agency) {
        $agency->delete();
    }

    

    // Log success.
    \Drupal::logger('appointment')->notice('Entities deleted successfully during uninstall.');

} catch (EntityStorageException $e) {
    // Log error.
    \Drupal::logger('appointment')->error('Error deleting entities during uninstall: @message', ['@message' => $e->getMessage()]);
}

  // // 4. Delete taxonomy terms for the "specializations" vocabulary.
  // $term_storage = $entity_manager->getStorage('taxonomy_term');
  // $terms = $term_storage->loadByProperties(['vid' => 'specializations']);
  // foreach ($terms as $term) {
  //   $term->delete();
  // }

  // // 5. Delete the "specializations" vocabulary.
  // if ($vocabulary = $entity_manager->getStorage('taxonomy_vocabulary')->load('specializations')) {
  //   $vocabulary->delete();
  // }

  // 6. Optionally, delete any dynamic configuration
  //    (not necessary for config provided by config/install).
  $config_names = [
    'field.field.user.user.field_agency',
    'field.field.user.user.field_specializations',
    'field.field.user.user.field_working_hours',
    'field.storage.user.field_agency',
    'field.storage.user.field_specializations',
    'field.storage.user.field_working_hours',
    'user.role.adviser',
  ];
  foreach ($config_names as $config_name) {
    \Drupal::service('config.factory')->getEditable($config_name)->delete();
  }
}